apiVersion: v1
data:
  additional1.yaml: |
    worker_app: synapse.app.generic_worker
    worker_name: additional1

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/additional1_log_config.yaml

    worker_listeners:
      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9090
        tls: false
        x_forwarded: true
        resources:
          - names: [client, federation]
            compress: false

      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9094
        resources:
          - names: [replication]

      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9135
  additional1_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_additional1.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  appservice.yaml: |-
    worker_app: synapse.app.appservice
    worker_name: appservice

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/appservice_log_config.yaml

    worker_listeners:
      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9121
  federation_sender1.yaml: |
    worker_app: synapse.app.federation_sender
    worker_name: federation_sender1

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/federation_sender1_log_config.yaml

    worker_listeners:
      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9101
  federation_sender1_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_federation_sender1.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  federation_sender2.yaml: |
    worker_app: synapse.app.federation_sender
    worker_name: federation_sender2

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/federation_sender2_log_config.yaml

    worker_listeners:
      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9102
  federation_sender2_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_federation_sender2.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  federation_sender3.yaml: |
    worker_app: synapse.app.federation_sender
    worker_name: federation_sender3

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/federation_sender3_log_config.yaml

    worker_listeners:
      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9103
  federation_sender3_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_federation_sender3.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  generic_worker1.yaml: |
    worker_app: synapse.app.generic_worker
    worker_name: generic_worker1

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/generic_worker1_log_config.yaml

    worker_listeners:
      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9090
        tls: false
        x_forwarded: true
        resources:
          - names: [client, federation]
            compress: false

      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9094
        resources:
          - names: [replication]

      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9131
  generic_worker1_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_generic_worker1.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  generic_worker2.yaml: |
    worker_app: synapse.app.generic_worker
    worker_name: generic_worker2

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/generic_worker2_log_config.yaml

    worker_listeners:
      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9090
        tls: false
        x_forwarded: true
        resources:
          - names: [client, federation]
            compress: false

      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9094
        resources:
          - names: [replication]

      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9132
  generic_worker2_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_generic_worker2.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  generic_worker3.yaml: |
    worker_app: synapse.app.generic_worker
    worker_name: generic_worker3

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/generic_worker3_log_config.yaml

    worker_listeners:
      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9090
        tls: false
        x_forwarded: true
        resources:
          - names: [client, federation]
            compress: false

      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9094
        resources:
          - names: [replication]

      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9133
  generic_worker3_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_generic_worker3.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  generic_worker4.yaml: |
    worker_app: synapse.app.generic_worker
    worker_name: generic_worker4

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/generic_worker4_log_config.yaml

    worker_listeners:
      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9090
        tls: false
        x_forwarded: true
        resources:
          - names: [client, federation]
            compress: false

      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9094
        resources:
          - names: [replication]

      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9134
  generic_worker4_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_generic_worker4.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  presence.yaml: |
    worker_app: synapse.app.generic_worker
    worker_name: presence

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/presence_log_config.yaml

    worker_listeners:
      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9090
        tls: false
        x_forwarded: true
        resources:
          - names: [client, federation]
            compress: false

      - type: http
        bind_addresses: ['0.0.0.0']
        port: 9100
        resources:
          - names: [replication]

      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9137
  presence_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_presence.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
  pusher.yaml: |
    worker_app: synapse.app.pusher
    worker_name: pusher

    # The replication listener on the synapse to talk to.
    worker_replication_host: synapse-master
    worker_replication_http_port: 9093

    worker_log_config: /data/workers/pusher_log_config.yaml

    worker_listeners:
      - type: metrics
        bind_addresses: ['0.0.0.0']
        port: 9111
  pusher_log_config.yaml: |
    # Log configuration for Synapse.
    #
    # This is a YAML file containing a standard Python logging configuration
    # dictionary. See [1] for details on the valid settings.
    #
    # Synapse also supports structured logging for machine readable logs which can
    # be ingested by ELK stacks. See [2] for details.
    #
    # [1]: https://docs.python.org/3.7/library/logging.config.html#configuration-dictionary-schema
    # [2]: https://matrix-org.github.io/synapse/latest/structured_logging.html

    version: 1

    formatters:
        precise:
            format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'

    handlers:
        file:
            class: logging.handlers.TimedRotatingFileHandler
            formatter: precise
            filename: /data/worker_pusher.log
            when: midnight
            backupCount: 2  # Does not include the current log file.
            encoding: utf8

        # Default to buffering writes to log file for efficiency.
        # WARNING/ERROR logs will still be flushed immediately, but there will be a
        # delay (of up to `period` seconds, or until the buffer is full with
        # `capacity` messages) before INFO/DEBUG logs get written.
        buffer:
            class: synapse.logging.handlers.PeriodicallyFlushingMemoryHandler
            target: file

            # The capacity is the maximum number of log lines that are buffered
            # before being written to disk. Increasing this will lead to better
            # performance, at the expensive of it taking longer for log lines to
            # be written to disk.
            # This parameter is required.
            capacity: 10

            # Logs with a level at or above the flush level will cause the buffer to
            # be flushed immediately.
            # Default value: 40 (ERROR)
            # Other values: 50 (CRITICAL), 30 (WARNING), 20 (INFO), 10 (DEBUG)
            flushLevel: 30  # Flush immediately for WARNING logs and higher

            # The period of time, in seconds, between forced flushes.
            # Messages will not be delayed for longer than this time.
            # Default value: 5 seconds
            period: 5

        # A handler that writes logs to stderr. Unused by default, but can be used
        # instead of "buffer" and "file" in the logger handlers.
        console:
            class: logging.StreamHandler
            formatter: precise

    loggers:
        synapse.storage.SQL:
            # beware: increasing this to DEBUG will make synapse log sensitive
            # information such as access tokens.
            level: WARN

        twisted:
            # We send the twisted logging directly to the file handler,
            # to work around https://github.com/matrix-org/synapse/issues/3471
            # when using "buffer" logger. Use "console" to log to stderr instead.
            handlers: [file]
            propagate: false

    root:
        level: WARN

        # Write logs to the `buffer` handler, which will buffer them together in memory,
        # then write them to a file.
        #
        # Replace "buffer" with "console" to log to stderr instead. (Note that you'll
        # also need to update the configuration for the `twisted` logger above, in
        # this case.)
        #
        handlers: [buffer]

    disable_existing_loggers: false
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: synapse-worker-config
